正则指引
第一章
字符组
\d (digit) 等价于 [0-9]
\s (space) 等价于 [ \t\r\n\v\f]
\w (word) 等价于 [0-9a-zA-Z_]
\S \D \W 和 \s \d \w恰好相反，所以[\s\S] [\d\D] [\w\W] 可以匹配任意字符
. 能匹配任意字符，但不能匹配换行符'\n'

第二章
量词
—————————————————————————————————————————————————————————————
常用量词 | {m,n}等价形式  注：逗号后面没有空格
—————————————————————————————————————————————————————————————
   *     | {0,}
—————————————————————————————————————————————————————————————
   +     | {1,}
—————————————————————————————————————————————————————————————
   ?     | {0,1}
—————————————————————————————————————————————————————————————

匹配HTML tag,如<table> <img> <head> : <[^>]+>
/*
 对于<input name="text" value=">" /> 这样的字符串的匹配是有问题的
 > 只能作为属性出现， '[^']*' 和 "[^"]*"
 <('[^']*'|"[^"]*"|[^'">])+>  这样就好了
*/

open tag : <[^/>][^>]*>
close tag : </[^>]+>
self-closing tag : <[^>/]+/>
其实<[^/>][^>]*>也可以匹配 self-closing tag, <[^/>][^>]*[^/]> 就可以保证匹配的open tag不会以/>结尾了。但无法匹配如<u>这样的tag
使用分组解决这样一个问题: <[^/>]([^>]*[^/])?>   
贪婪匹配之优先匹配量词：
".*"  去匹配 "quoted string" and another" 得到 "quoted string and another",
"[^"]*" 匹配其得到 "quoted string"
贪婪匹配，一开始匹配全部，当把文本字符全部匹配完后，发现pattern还有式子没有匹配，查询之前保存的备用状态，如果发现有能匹配的，
就看能不能退回几步，这就是回溯。让.*"反悔"匹配，交给pattern后面的式子进行匹配。

忽略优先量词：
[\s\S]*
[\s\S]*?      忽略优先量词  *?和*限定的元素出现次数范围与*完全一样
遇到[\s\S]能匹配的字符，先尝试"忽略",如果pattern中后面的元素不能匹配，再尝试匹配。

忽略优先量词优先选择"忽略"，匹配优先量词会优先选择"匹配"。忽略优先量词必须兼顾它所限定的元素和之后的元素，效率会有一定的降低。
——————————————————————————————————————————————————————————————————————————
匹配优先量词  |  忽略优先量词 |   限定次数
——————————————————————————————————————————————————————————————————————————
     *        |       *?      | 可能出现，也可能不出现，出现次数没有上限 
——————————————————————————————————————————————————————————————————————————
     +        |       +?      | 至少出现一次，出现次数没有上限
——————————————————————————————————————————————————————————————————————————
     ?        |       ??      | 至多出现一次，也可能不出现 
——————————————————————————————————————————————————————————————————————————
   {m,n}      |      {m,n}?   | 出现次数最少为m次，最多为n次
——————————————————————————————————————————————————————————————————————————
   {m,}       |       {m,}?   | 出现次数最少为m次，没有上限
——————————————————————————————————————————————————————————————————————————
   {,n}       |       {,n}?   | 可能出现，也可能不出现，最多出现n次
——————————————————————————————————————————————————————————————————————————

匹配注释:
//.* 匹配   //xx
/\*[sS]*?\*/ 匹配 /**/ 
匹配超链接: <a\s[\s\S]+?</a>  (可以提取所有的超链接)

对于table tag:
匹配table: <table[\s>][\s\S]+?</table>
匹配tr: <tr[\s>][\s\S]+?</tr>

linux中匹配一个文件目录和文件： 如 /usr/local/bin/python
^.*/  匹配到 /usr/local/bin
[^/]*$ 匹配到python

如果需要匹配字符串{m,n}, 正则表达式需要写成\{m,n}

第三章
括号
匹配生份证：
15位身份证号码：[1-9]\d{14}
18位身份证号码：[1-9]\d{14}\d{2}[0-9x]
通用的匹配身份证号码：[1-9]\d{14}(\d{2}[0-9x])?   
量词限定之前元素的出现，这个元素可能是一个字符，也可能是一个字符组，还可能是一个表达式——如果把这个表达式用括号括起来，
这个元素就是括号里的表达式，括号内的表达式通常被称为"子表达式"。(\d{2}[0-9x])作为一个整体，或许不出现，或许最多出现一次。
括号的这种功能，叫做分组(grouping)

写一个正则匹配 
/foo
/foo/bar.php
/foo/bar_qux.php  这几种情况
/foo是必需出现的，之后存在呢两种可能，
——————————————————————————————————————————————————————————————————
/bar.php对应的表达式          |    /[a-z]+\.php
——————————————————————————————————————————————————————————————————
/bar_qux.php对应的表达式      |    /[a-z]+_[a-z]+\.php
——————————————————————————————————————————————————————————————————
上面两种情况合并之后的表达式  |    /[a-z]+(_[a-z]+)?\.php
——————————————————————————————————————————————————————————————————
和/foo合并                    |    /[a-z]+(/[a-z]+(_[a-z]+)?\.php)?
——————————————————————————————————————————————————————————————————
注意其写正则的思路

匹配邮箱：
ijiaobu@qq.com, 分为两段，用户名和主机名
\w就是[A-Za-z0-9_], 匹配用户名就是 [-.\w]{0,64} 最长为64个字符
主机名一般就是 somehost.net sub.somehost.net mail.sub.somehost.net
所以匹配规则就是 ([-a-zA-Z0-9]{1,63}\.)*[-a-zA-Z0-9]{1,63} 

多选结构匹配身份证号码：([1-9]\d{14}|[1-9]\d{16}[0-9x])      
匹配IP地址，对IP地址分析为0-255:
————————————————————————————————————————————————————————————————————————————
如果是 1 位数                                                  | [0-9]
————————————————————————————————————————————————————————————————————————————
如果是 2 位数                                                  | [0-9]{2}
————————————————————————————————————————————————————————————————————————————
如果是 3 位数                                                  |
————————————————————————————————————————————————————————————————————————————
    如果第1位是1                                               | 1[0-9][0-9]
————————————————————————————————————————————————————————————————————————————
    如果第1位是2                                               | 
————————————————————————————————————————————————————————————————————————————
        如果第2位是0~4                                         | 2[0-4][0-9]
————————————————————————————————————————————————————————————————————————————
        如果第2位是5                                           | 25[0-5]
————————————————————————————————————————————————————————————————————————————
用多选结构把这几个表达式合并起来，
([0-9]|[0-9]{2}|1[0-9][0-9]|2[0-4][0-9]|25[0-5])
识别030、005这样的数值
((00)?[0-9]|0?[0-9]{2}|1[0-9][0-9]|2[0-4][0-9]|25[0-5])

匹配年月日：
————————————————————————————————————————————————————————————————————————————
月                 |  (0?[1-9]|1[012])
————————————————————————————————————————————————————————————————————————————
日                 |  (0?[1-9]|[12][0-9]|3[01])
————————————————————————————————————————————————————————————————————————————
小时               |  (0?[1-9]|[01]\d|2[0-4])
————————————————————————————————————————————————————————————————————————————
分钟               |  (0?[1-9]|[0-5]\d|60)
————————————————————————————————————————————————————————————————————————————

匹配手机号：手机号一般11位，前三位是号段，目前有  130-139、 150-153、155-156、180、182、185-189
(13[0-9]|15[0-356]|18[025-9])\d{8}, 如果有0或+86,则：
(0|+86)?(13[0-9]|15[0-356]|18[025-9])\d{8}

