在正式的语言语法规则中,每一种语法单元或组合被称之为符号(symbol). 
那些可以通过语法规则被分解成更小的结构的符号叫做非终结符(nonterminal symbols). 
那些不能被再分的符号叫做终结符(terminal symbols)或者记号类型(token types). 
我们把同终结符相对应的输入片段叫做记号(token), 把同单个非终结符相对应的输入片段叫做组(grouping).

我们可以使用C语言做为例子来解释什么是符号,以及终结符和非终结符的含义. 


C语言的记号包括标识符,常量(数字或者字符串)以及各种关键字,数学操作符和标点符号. 
所以C语言语法的终结符包括`identifier',`number',`string',加上每个关键字的符号,操作符或者标点符号 . 
例如:`if',`return',`const',`static',`int',`char',`plus-sign',`open-brace',`close-brace',`comma'
以及更多. (这些记号可以再分为字符,但是这些是词法学而不是语法学的事情)

这是一个如何将C函数分解成记号的例子:	
int             /* 关键字 `int' */
square (int x)  /* identifier, open-paren, 关键字 `int', identifier, close-paren */
{               /* open-brace */
  return x * x; /* 关键字 `return', identifier, asterisk, identifier, semicolon */
}                /* close-brace */

语法规则在Bison语法中也有相应的表示.例如,下面有一个C语言return语句的规则. 
在引号中的分号,是一个字符记号,它是用来表示C语言部分语法的. 没有在引号中的分号和冒号是Bison用来表示每一条规则的标点符号. 	
stmt:   RETURN expr ';'
        ;

一个表达式可以是一个数字，也可以是一个变量名称，也可以是几个名称的组合。
---------------------------------------------------------------------------------------------------------------------
1.3 语义值-Semantic Values
分类为INTEGER的记号包含语义值4. 另一个也被分类为INTEGER的记号的语义值却是3989.
当一个语法规则表明INTEGER是允许的,任意的这些记号都是可接受的,因为它们都是INTEGER. 
当一个分析器接受了记号,它会跟踪这个记号的语义值.
每一个语法组和它的非终结符也可已有语义值. 一个很典型的例子,在计算器中,一个表达式含有一个数值做为它的语义值, 
在程序语言编译器中.一个典型的表达式含有一个用于描述它含义的树型结构做为语义值.

---------------------------------------------------------------------------------------------------------------------
1.4 语义动作
大多数时候,动作的目的是从部分结构的语义值计算整个结构的语义值. 例如,加入我们有一个规则表明一个表达式可以由两个表达式相加而成. 
当分析器识别了一个加法和,每一个子表达式都有一个描述其如何构建的语义值. 这个规的动做就是为了新识别的大表达式建立一个类似的语义值.

例如,这里的一个规则表明一个表达式可由两个表达式相加而成.	
expr: expr '+' expr   { $$ = $1 + $3; }
        ;
这个动作表明了如何从子表达式的语义值产生加法和表达式的语义值.

---------------------------------------------------------------------------------------------------------------------
2.1 逆波兰记号计算器-Reverse Polish Notation Calculator
/* Reverse polish notation calculator.  */
/* 逆波兰记号计算器 */

%{
  #define YYSTYPE double
  #include <math.h>

  int yylex (void);
  void yyerror (char const *);
%}

%token NUM

%% /* Grammar rules and actions follow.  */
input:    /* empty */                                     
        | input line
;
line:     '/n'
        | exp '/n'      { printf ("/t%.10g/n", $1); }
;
exp:      NUM           { $$ = $1;           }
        | exp exp '+'   { $$ = $1 + $2;      }
        | exp exp '-'   { $$ = $1 - $2;      }
        | exp exp '*'   { $$ = $1 * $2;      }
        | exp exp '/'   { $$ = $1 / $2;      }
         /* Exponentiation */
        | exp exp '^'   { $$ = pow ($1, $2); }
         /* Unary minus    */
	| exp 'n'       { $$ = -$1;          }
	;
%%
你必须用C语言来指定这些动作, 但是Bison也提供了在规则之间传递语义值的方法. 在每个动作中,伪变量$$代表着将要构建的组的语义值. 
赋值给$$是大多数动作的工作. 规则的组成部分的语义值由$1,$2等等指定.

表达式(名称是exp), 输入行(line),整个的输入脚本(input),
这些非终结符每个都有多个可选择的规则. 这些规则由`|'连接而成. 我们可以把`|'读做"或者".
你必须用C语言来指定这些动作, 但是Bison也提供了在规则之间传递语义值的方法. 
在每个动作中,伪变量$$代表着将要构建的组的语义值. 赋值给$$是大多数动作的工作. 
规则的组成部分的语义值由$1,$2等等指定.

考虑input的定义:
input:    /* empty */
        | input line
;
这个定义可以被解释为:"一个完整的输入己可能是一个空字符串, 也可能是一个完整输入后紧跟一个输入行".
我们应该注意到"完整输入"定义在它自己的条款中. 由于input总是出现在符号序列的最左端, 我们称这种定义为左递归(left recursive). (参阅 递归规则-Recursive Rule.)

第一个可选择的规则为空是由于在冒号和第一个`|'之间没有任何符号;
这意味着input可以匹配一个空字符串的输入(没有符号). 
我们这样编写规则是因为在你启动计算器后,在右端输入Ctrl-d是合法的. 
把空规则放在最开始并伴随注释`/* empty */'是使用惯例.

第二个可选的规则(input line)处理了所有非平凡的输入. 它的含义是"在读取任意个数的line后,如果可能的化读取更多的line."
作递归使得这个规则进入循环. 由于第一个可选的规则与空输入匹配,循环可能被执行零次或多次.

分析器函数yyparse继续处理输入直到发现一个语法错误或者 词法分析器表明没有更多的输入记号为止; 
我们会安排后者在输入结束的时候发生.


现在我们考虑line的定义:
	
line:     '\n'
        | exp '\n'  { printf ("/t%.10g\n", $1); }
;
第一个选择是一个换行符号; 这意味着rpcalc接受一个空白行(并且忽略它,因为没有相关的动作). 
第二个选择是一个表达式后紧跟着一个换行符. 这个选择使得rpcalc变得实用. $1的值是exp组的语义值, 这是因为exp是诸多选择中的第一个符号. 
这个值就是用户需要的计算结果. 相关的动作打印了这个这个值.

这个动作非同寻常,因为它并没有向$$赋值. 这样做的结果就是与line相关联的语义值并未被初始化(它的值是不可预期的).
如果那个值被使用的话,这会成为一个bug,但是我们并未使用它. rpcalc一旦已经打印了用户输入行的值,就不再需要那个值了.

exp组有很多规则,每一个都是一种表达式. 第一个规则处理最简单的表达式:仅仅是数字的表达式. 
第二个处理看起来像两个表达式后紧跟一个加法符号的加法表达式. 
第三个处理减法等等. 	
exp:      NUM
        | exp exp '+'     { $$ = $1 + $2;    }
        | exp exp '-'     { $$ = $1 - $2;    }
        …
        ;
我们已经使用`|'将exp的规则连接起来. 但是我们也可以将它们分开来写:
exp:      NUM ;
exp:      exp exp '+'     { $$ = $1 + $2;    } ;
exp:      exp exp '-'     { $$ = $1 - $2;    } ;
        …
大部分规则都有从其部分值来计算表达式值的动作. 例如,在加法的规则中,$1指的是第一个部件exp, 而$2指的是第二个部件. 
第三个部件<code>'+'并没有相关联的语义值. 但是如果它有语义值的话,你可以用$3来代表. 
当yyparse使用这个规则识别了一个加法和表达式, 两个自表达式值的相加而得到了整个表达是的值. 参阅 动作-Actions.
你不必为每一个规则都指定动作. 当一个规则没有动作时,Bison会默认地将$1的值复制给$$. 这就是在第一规则被(使用NUM的规则)识别时发生的事情.

在这里展示的是推荐的惯用格式, 但是Bison并没有要求一定要这么做. 你可以增加或者更改任意你想要的数量的空白. 例如,这个:
exp   : NUM | exp exp '+' {$$ = $1 + $2; } | … ;
与这个的意义相同
exp:      NUM
        | exp exp '+'    { $$ = $1 + $2; }
        | …
;
然而,后一种写法明显更可读.



