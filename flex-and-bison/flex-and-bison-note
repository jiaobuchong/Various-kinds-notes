第一章
flex(Fast Lexical Analyzer Generator), 快速词法分析器生成程序
由flex生成的词法分析器可以读取输入，匹配输入与所有的正则表达式并且执行每次匹配后适当的关联动作。
flex和bison是用来生成程序的工具，他们所生成的程序能够处理结构化的输入。
 flex 处理分词，将输出切分成一段一段的token，这些tokens可以喂给Bison处理，当然了，我们完全也可以不喂给bison，直接自己处理就得了（flex生成词法分析器---它可以把输入分解成为记号以便于你的程序的其他部分来使用）。

把分析工作分成两个部分：词法分析和语法分析

词法分析把输入分割成一个个有意义的词块,称为记号(token);而语法分析则确定这些记号是如何彼此关联的。

对于这样一段c代码：
alpha = beta + gamma;
词法分析： alpha = beta + gamma ;   共有6个记号
语法分析：确定beta + gamma是一个表达式，而这个表达式被赋给了alpha
flex程序主要由一系列带有指令的正则表达式组成，这些指令确定了正则表达式匹配后相应的动作。

%{
#include<stdio.h>
%}
%%
.   {printf("one character: %s\n", yytext);} 
%%
对于这样一个简单的flex程序，生成词法分析器后，在终端运行：
jack@jiaobuchong:~/flex_and_bison/first$ ./first 
ert
one character: e
one character: r
one character: t

从这里我们能发现什么，flex是一个一个字符进行匹配的。

---------------------------------------------------------------------------------------------------------------
wc.l
//第一部分 包含声明和选项设置.这种括号说明内部的代码不许flex处理，直接进入.C文件
%{
int chars = 0;   //字符数
int words = 0;   //单词数
int lines = 0;   //行数
%}

//第二部分是一系列的模式和动作
//在任意一个flex动作中，变量yytext总是设为指向本次匹配的输入文本。
%%
[a-zA-Z]+ { words++; chars += strlen(yytext); }
\n        { chars++; lines++;}
.         { chars++; }
%%

//第三部分则是会被拷贝到生成的词法分析器里面的c代码
main(int argc, char **argv)
{
    yylex();    //调用负责提供词法分析例程yylex()   
    printf("%8d%8d%8d\n", lines, words, chars);
}

上面的内容分成三个部分，第一部分声明，第二部分是规则部分，简单地说就是


>flex wc.l
>gcc -o wc lex.yy.c -lfl   #生成可执行文件wc，-lfl说明链接libfl.a库文件
>cat log.txt | wc          #使用管道命令

---------------------------------------------------------------------------------------------------------------
[xyz]      一个字符类，在这个例子中，输入必须符合要么是'x’要么是'y'要么是'z'
[abj-oZ]   一个带范围的字符类，符合任何满足'a', 'b', 从'j'到'o'还有'Z'
[^A-Z]     一个取反的字符类，比如任何字母除了大写字母。 
[^A-Z\n]   任何字符除了大写字母和换行
r*         零个或更多r，r可以是任意正则表达式
r+         一个或更多r
r?         零个或最多一个r
r{2,5}     任何2到5个r
r{2,}      2个或更多r
r{4}       正好4个r
{name}     对name的扩展
"[xyz]\"foo"    符合正则表达式 [xyz]"foo 的字符串
\X         如果X是一个'a', 'b', 'f', 'n', 'r', 't', 或者'v',
           则按照ASCII码\x转义符进行处理，否则，其他的'X'将用来做取消处理符处理
\0         一个ASCII码空字符
\123       内容为八进制123的char型
\x2a       内容为十六进制0x2a的char型
(r)        符合一个r，括号是用来越过优先级的
rs         正则表达式r，紧跟着一个
r|s        要么是r要么是s
^r         一个r，但是必须是在一行的开始
r$         一个r，但是必须是在行末
<s>r       一个r，但是之前字符串必须符合条件s
<s1,s2,s3>r  同上，但是必须之前字符串符合s1或者s2或者s3
<*>r       不考虑开始字符串类型，只符合r
<<EOF>>    文件末尾
<s1,s2><<EOF>>     前面符合s1或者s2的文件末尾


---------------------------------------------------------------------------------------------------------------
file.l
%{
#include <stdio.h>
%}
%%
[a-zA-Z][a-zA-Z0-9]*  printf("WORD ");            /* 字符串 */
[a-zA-Z0-9\/.-]+      printf("FILENAME ");        /* 文件名 */
\"                    printf("QUOTE ");           /* 引号"*/
\{                    printf("OBRACE ");          /* 左花括号 */
\}                    printf("EBRACE ");          /* 右花括号 */
;                     printf("SEMICOLON ");       /* 分号 */
\n                    printf("\n");               /* 换行 */
[ \t]+                                            /* 忽略空白字符 */
%%
int yywrap(void)      /* 当词法分析器到了文件末尾做什么 */
{
    return 1;         /* 返回1，说明停止前进，0则继续 */
}

void yyerror(char *s) /* 错误信息打印函数 */
{
    fprintf(stderr, "%s\n", s);
    return 0;
}

int main(int argc, char *argv[])
{
     FILE *fp;
     fp = fopen(argv[1], "r");      /* 首先打开要被处理的文件（参数1）*/
     yyin = fp;                     /* yyin是lex默认的文件输入指针，则不处理控制台输入.给了yyin新的输入*/
     
     yylex();                       /* 调用lex的工作函数，从这里开始，lex的词法分析器开始工作 */
     fclose(fp);
     return 0;
}


---------------------------------------------------------------------------------------------------------------
xx.l
%%
"+" { printf("plus"); }         //使用引号，告诉flex使用字符串的原意，而不是解释成正则表达式
"-" { printf("minus"); }
"*" { printf("times"); }
"/" { printf("divide"); }
"|" { printf("ABS"); }
[0-9]+ { printf("NUMBER %s", yytext); }
\n { printf("MEWLINE\n"); }
[ \t] { }
. { printf("My mestery characters: %s\n", yytext); }
%% 

记号编号和记号值:
当flex词法分析器返回一个记号流时，每个记号实际上有两个组成部分，记号编号(token number)和记号值(token value).这里的记号编号可以是一个较小的整数。

文法与语法分析
语法分析器的任务是找出记号之间的关系。一个常见的关系表达式方式就是语法分析树(parse tree).
bison语法分析器在分析其输入时会构造一棵语法分析树。
在计算机分析程序里常用的语言就是上下文无关文法(Context-Free Grammer, CFG)。
书写上下文无关文法的标准格式就是BNF。

BNF语法可以用来表达与内容无关的，基于语法的语言，几乎所有的现代编程语言都可以用BNF进行描述。作为一个例子，


---------------------------------------------------------------------------------------------------------------
一个进行加法和乘法的数学表达式语法可以如下表达：
E : E '+' E
E : E '*' E
E : id
在这三句中，E在Bison语言中代表表达式，一个表达式可以是一个数字，也可以是一个变量名称，也可以是几个变量名称的组合，比如：
1
1+2
a
a+b*c
而以上三句Bison语言就能够表达这些语法结构。

以上我们设计的计算器只能进行加减计算，并且里面还有一些软件缺陷，对于一个实用的计算器来说，我们必须能够支持：
变量定义
变量赋值
变量与数字立即处理
于是我们假想设计出来的计算器能有如下的操作过程（输入和输出）：输入：3*(4+5)
结果：27
输入：x = 3 * (4 + 5)
输入：y = 5
输入：x
结果：27
输入：y
结果：5
输入：x + 2 * y
结果：37

这样看，这个计算器的功能已经相当强大了，下面我们着手实现，首先修改上面例子的Flex文件为如下：
%{
#include <stdlib.h>
void yyerror(char*);
#include "test2yy.h"
%}
%%
[a-z] { /* 变量类型词汇，限制：变量只能用一个字符 */   yylval = *yytext - 'a'; return VARIABLE; }
[0-9]+ { /* 整数 */  yylval = atoi(yytext); return INTEGER;}
[+-()=/*\n]  { return *yytext; }          /* 数学计算符号 */
[ \t]         ; /* 跳过空白符号 */
%%
int yywrap(void)
{
     return 1;
}
下面是我们新的Bison文件：
%token INTEGER VARIABLE
%left '+' '-'
%left '*' '/'
%{
void yyerror(char *);
int yylex(void);
int sym[26]；
%}
%%
program: program statement '\n' | ;
statement: expr     { printf("%d\n", $1);} | VARIABLE '=' 
           expr     { sym[$1] = $3; };
           expr:
           INTEGER | VARIABLE                 { $$ = sym[$1]; }
           | expr '+' expr            { $$ = $1 + $3;}
           | expr '-' expr            { $$ = $1 - $3; }
           | expr '*' expr            { $$ = $1 * $3;}
           | expr '/' expr            { $$ = $1 / $3;}
           | '(' expr ')'{ $$ = $2;};
%%
void yyerror(char*s)
{
    fprintf(stderr, "%s\n", s);
    return 0;
}
int main(void)
{
    yyparse();
    return 0;
}
现在我们对该例子中引入的新功能介绍，%left，%right，%token都是用来声明词汇的，区别在于，%token声明的词汇与左右优先级无关，而%left的处理时，
先处理左边的，%right先处理右边的，例如遇到字符串"1 - 2 - 5"，到底是处理为"(1 - 2) -5"，还是处理为"1 - (2 -5)"？%left处理为前者，
而%right处理为后者（注：第一个计算器代码中就有这个缺陷，比如执行1-2+3，得到的结果就是-4，作为一个练习，读者可以使用这里讲解的%left自行更正）。

---------------------------------------------------------------------------------------------------------------


