apt-get update，apt-get upgrade，apt-get dist-upgrade的作用
安装或升级系统分下面几个步骤。
第一步，获得最近的软件包的列表；列表中包含一些包的信息，比如这个包是否更新过。
第二步，如果这个包没有发布更新，就不管它；如果发布了更新，就把包下载到电脑上，并安装。
apt-get update对应的就是第一步，得到软件包的列表。
apt-get upgrade 与apt-get dist-upgrade对应的是第二步。 
由于包与包之间存在各种依赖关系。upgrade只是简单的更新包，不管这些依赖，它不和添加包，或是删除包；而dist-upgrade可以根据依赖关系的变化，添加包，删除包。
一般在运行upgrade或dist-upgrade之前，先要运行update。

dpkg -L firefox 可查看Firefox的安装情况；dpkg -L eclipse  可查看Eclipse的安装位置。

给命令取别名：
alias md='mkdir'

在linux终端，按ctrl+l就可以清屏
cp /home/jack/python/youdao.py .  #将某个文件复制到当前目录下
cp module_funco.py string.py    #将module_func.py 复制为string.py
cp -r source dest_file         #拷贝目录用 -r 参数
rm -r #删除一个文件

例如我们想要建立目录Project，其中含有4个文件夹a, b, c, d，且这4个文件都含有一个src文件夹。或许，我们可以逐个创建，但我更倾向于使用单个命令来搞定，而mkdir 的-p选项和shell的参数扩展允许我这么做，例如下面的一个命令就可以完成任务。
mkdir -p Project/{a,b,c,d}/src
mkdir -p wwwroot/{video, bbs, qa}   在wwwroot文件夹下还建立三个文件夹(video, bbs, qa)

#mount a partition
mkdir /mnt/your_device1
mkdir /mnt/your_device2
mount /dev/your_device1 /mnt/your_device1
mount /dev/your_device2 /mnt/your_device2
umount /media/XINGEBAN    #卸载挂载的u盘

ls -S  #可以让你的文件是 文件夹排在一起 文件排在一起
 
#将bash 终端的bash的clear命令改为 c
vim .bashrc  #在这个.bashrc文件里，加入下面的代码
alias c='clear'

source .bashrc  #将你目前改过的文件，初始化一下
vim .bash_history  #查看你输过的所有命令

histroy   查看输入的历史命名

在红帽系统中，我们要查看一个已安装的软件都在我们系统中安装了什么，可以使用命令rpm -ql softwarename，那么在ubuntu下怎么查看呢？
使用命令apt-file list softwarename  dpkg -L python 
但是有时候系统提示apt-file这条命令找不到，这个时候我们使用apt-get install apt-file来安装

mv package_test.\[py  package_test.py #重新命名一个文件
ifconfig #查看ip

mux #开启tmux
tmux ls #显示已有tmux列表（C-b s）
tmux attach-session -t 数字 #选择tmux
C-b c 创建一个新的窗口    www.2cto.com  
C-b n 切换到下一个窗口
C-b p 切换到上一个窗口
C-b l 最后一个窗口,和上一个窗口的概念不一样哟,谁试谁知道
c-b w 通过上下键选择当前窗口中打开的会话
 
C-b 数字 直接跳到你按的数字所在的窗口
C-b & 退出当前窗口
C-b d 临时断开会话 断开以后,还可以连上的哟:)
C-b " 分割出来一个窗口
C-b % 分割出来一个窗口
 
C-b o 在小窗口中切换    www.2cto.com  
C-b (方向键)
C-b ! 关闭所有小窗口
C-b x 关闭当前光标处的小窗口
C-b t 钟表
C-b pageup/pagedo

dpkg的详细使用方法，网上有很多，下面简单列了几个：
dpkg -i package.deb 	安装包
dpkg -r package 	删除包
dpkg -P package 	删除包（包括配置文件）
dpkg -L package 	列出与该包关联的文件，安装这个包时同时安装了什么
dpkg -l package 	显示该包的版本
dpkg –unpack package.deb 	解开 deb 包的内容
dpkg -S keyword 	搜索所属的包内容
dpkg -l 	    列出当前已安装的deb包
dpkg -c package.deb 	列出 deb 包的内容
dpkg –configure package 	配置包
卸载deb软件包
dpkg –r用于卸载指定的软件包,该命令只卸载软件包安装到系统中的文件,而不去删除软件包的配置文件,因此不是完全意义上的卸载.但是软件包保存在系统中,可以提供给以后在安装软件包时使用.
例如:dpkg –r prozilla 移除后再用dpkg –l |grep prozilla 查看
会看到rc proc 1.3.6-3woody3 multi-thraded download accelerator
表示软件包已经被卸载,但配置文件仍在“rc”带表配置文件仍在.
卸载软件包并清除配置文件
dpkg –P 用于卸载软件包同时也删除配置文件,dpkg –P 不能解决Dpends问题,建议卸载时使用apt-get操作

#安装google浏览器
sudo dpkg -i google-chrome-stable_amd64.deb
sudo apt-get -f install                     #解决依赖关系
dpkg -l | grep chrome             查询chrome的安装情况


$which python   #查看该python命令调用的是那个位置的python
$whereis python

chmod  -R 777 /var/www/   #递归给www下的文件最大权限

ls -F 区分文件和目录
ls -R 查看目录下的各个文件
ls -l 文件的详细细信息
ls -s 输出每个文件的块大小
ls -S 按文件的大小排序输出
ls -t 按文件的修改时间排序输出
ls -X 按文件扩展名排序输出
ls -sail 是 -s -a -i -l 的一个组合 

diff 比较两个文件的差异
diff -u hello world --> diff.txt  #用diff命令比较hello和world文件的区别，-u参数，以合并的方式显示文件内容的不同


patch world < diff.txt            #通过和world的差异恢复hello文件

   patch 命令读取如何更改文件的源文件指示信息，然后应用这些更改。源文件包含由 diff 命令产生的差别列表（或者 diff 列表）。差异列表是比较两个文件和
   构建关于如何纠正差别的指示信息的结果。缺省情况下，patch 命令使用从标准输入读入的源文件，但是使用 -i 标志和 PatchFile 变量可以覆盖此设置。
   差异列表有三种格式：正常、上下文或者是 ed 编辑器风格。patch 命令确定差异列表格式，除非被 -c、-e 或 -n 标志否决。
   缺省情况下，文件的打过补丁的版本替换原始版本。指定 -b 标志时，每个补丁文件的原文件保存在同名的文件中，只是在文件名后附加了后缀 .orig。使用 -o
   标志也可以指定 输出的目的地。

常用项：
-r 是一个递归选项，设置了这个选项，diff会将两个不同版本源代码目录中的所有对应文件全部都进行一次比较，包括子目录文件。
-N 选项确保补丁文件将正确地处理已经创建或删除文件的情况。
-u 选项以统一格式创建补丁文件，这种格式比缺省格式更紧凑些。
-p0 选项从当前目录查找目的文件（夹）(直接使用补丁文件里面指定的路径)
-p1 选项忽略掉第一层目录，从当前目录查找(去掉补丁文件指定路径最左的第1个'/'及前面所有内容)。
-E  选项说明如果发现了空文件，那么就删除它
-R  选项说明在补丁文件中的“新”文件和“旧”文件现在要调换过来了（实际上就是给新版本打补丁，让它变成老版本）
如果删除了hello文件，下面就是通过打补丁还原hello文件
$cp world hello  #复制一份和world文件一样的内容
$patch -R hello < diff.txt #对这个hello文件通过diff.txt打补丁还原hello

tail -f 查看文件，-f参数查看文件的最后部分，并不断刷新输出。

zip -r test.zip ./test  #将当前test目录下压缩为test.zip
unzip test.zip -d /var/www  # -d 参数指定一个文件夹

unrar x test.rar ./test/   #将当前test.rar解压到 ./test/这个目录下

date -s "2014-10-29 18:52:55"

chown -vR mysql:mysql /mysqldata    # ":"前面是用户，后面是组
-R 处理指定目录以及其子目录下的所有文件
-v 显示详细的处理信息

cp -a test3 test5    #加上-a参数复制整个目录，如果test5存在，test3会被放入test5中
cp hello world                    #将hello文件内容复制到world文件

-v 显示详细的处理信息
cp -av /var/lib/mysql/* /var/mysqldata

Haskell编译器：
sudo apt-get install ghc
ghci

find demo/ -type d   #找一个目录下的所有目录，显示一个目录下的所有目录
chmod 777 -R demo/  #递归改变一个目录的权限 
find . -type f -exec ls -l '{}' ';'    #'{}'代表我们找到的那些文件名　　读：read 数字表示为4：110
　　写：write 数字表示为2：10
　　执行：execute 数字表示为：1
#递归的改变一个目录下（包括本目录）所有目录的权限：
find demo/ -type d -exec chmod 777 '{}' ';'
find demo/ -type f -exec chmod 777 '{}' ';'  #只改变文件的权限

which sublime 可以查看sublime命令在哪个位置

read:4 
write:2 
execute:1

查看日志： tail -f /var/www/php-practice/shop/data/log/curr.log  

man 一个命令时，显示的内容会比较多，f(forward)向下翻动一页，b(backward)向后翻动一页

!m 执行上面的一个以m开头的命令
fg 


